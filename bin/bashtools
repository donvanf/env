#!/bin/bash
usage(){
	delimit_line "$(output undcyn brief)"
	cat << EOF
function list:
	prompt_color_list
	env_check
	delimit_line
	check_result
	output
how to:
	run bashtools.sh --help
EOF
	delimit_line "$(output undcyn function)"
}
prompt_color_list(){
	txtblk='\e[0;30m' # Black - Regular
	txtred='\e[0;31m' # Red
	txtgrn='\e[0;32m' # Green
	txtylw='\e[0;33m' # Yellow
	txtblu='\e[0;34m' # Blue
	txtpur='\e[0;35m' # Purple
	txtcyn='\e[0;36m' # Cyan
	txtwht='\e[0;37m' # White
	bldblk='\e[1;30m' # Black - Bold
	bldred='\e[1;31m' # Red
	bldgrn='\e[1;32m' # Green
	bldylw='\e[1;33m' # Yellow
	bldblu='\e[1;34m' # Blue
	bldpur='\e[1;35m' # Purple
	bldcyn='\e[1;36m' # Cyan
	bldwht='\e[1;37m' # White
	unkblk='\e[4;30m' # Black - Underline
	undred='\e[4;31m' # Red
	undgrn='\e[4;32m' # Green
	undylw='\e[4;33m' # Yellow
	undblu='\e[4;34m' # Blue
	undpur='\e[4;35m' # Purple
	undcyn='\e[4;36m' # Cyan
	undwht='\e[4;37m' # White
	bakblk='\e[40m'   # Black - Background
	bakred='\e[41m'   # Red
	badgrn='\e[42m'   # Green
	bakylw='\e[43m'   # Yellow
	bakblu='\e[44m'   # Blue
	bakpur='\e[45m'   # Purple
	bakcyn='\e[46m'   # Cyan
	bakwht='\e[47m'   # White
	txtrst='\e[0m'    # Text Reset
	if [ x"$1" = x"sc" ]; then
		local color_show
		for color_show in txtblk txtred txtgrn txtylw txtblu txtpur txtcyn txtwht bldblk bldred \
bldgrn bldylw bldblu bldpur bldcyn bldwht unkblk undred undgrn undylw undblu undpur \
undcyn undwht bakblk bakred badgrn bakylw bakblu bakpur bakcyn bakwht txtrst; do
			echo -en "${!color_show}$color_show$txtrst "
		done
		echo
	fi
}
env_check(){
#this function is used for checking differences between environments before and after running the to_be_test_function. 
        [ -z $1 ] && echo "usage: env_check test_func [ args ]" && return 1
        set > set.old
        local test_func=$1
        shift
        local test_args="$@"
        $test_func "$test_args"
        unset test_func test_args
        set > set.new
        echo ------------------------------$1 env check result------------------------------
        diff  -y --suppress-common-lines set.old set.new
        echo -------------------------------------------------------------------------------
        rm set.old set.new -f
}
delimit_line(){
#usage: delimit_line $title [$f_color] [$b_color]
        [ -z "$1" ] && echo "usage: delimit_line title [front_color] [end_color]" && return 1
        local title=$1
        local length=130
        local title_len=$(echo -n $title|sed 's/^\\[^m]*m/ /;s/\\[^\\]*m$/ /'|wc -c )
        local ifodd=$(($title_len%2))
        local f_hyphen=$((($length-$title_len)/2-3))
        local b_hyphen=$(($f_hyphen+$ifodd+3))
        local f_color=''
        local b_color=''
        [ $# -eq 3 ] && f_color=$2 && b_color=$3
		echo -e $(eval echo {1..$f_hyphen}| sed 's/$/ /;s/[^ ]* /-/g')"$f_color $title $b_color"$(eval echo {1..$f_hyphen}| sed 's/$/ /;s/[^ ]* /-/g')
        echo
}
check_result(){
	[ -z "$1" ] && echo "usage: check_result \$?" && return 1
	RESULT=$1
	if [ $RESULT = 0 ]; then
		delimit_line successed $txtgrn $txtrst
	else
		delimit_line failed $txtred $txtrst
	fi
	echo -e "\n\n"
}
output(){
	case $1 in
	success)
		shift
		echo -e $txtgrn"$*"$txtrst
	;;
	warn)
		shift
		echo -e $txtylw"$*"$txtrst
	;;
	error)
		shift
		echo -e $bldred"$*"$txtrst
	;;
	debug)
		shift
		echo -e $txtpur"$*"$txtrst
	;;
	txtblk | txtred | txtgrn | txtylw | txtblu | txtpur | txtcyn | txtwht | bldblk | bldred | bldgrn | bldylw | bldblu | \
bldpur | bldcyn | bldwht | unkblk | undred | undgrn | undylw | undblu | undpur | undcyn | undwht | bakblk | bakred | badgrn | \
bakylw | bakblu | bakpur | bakcyn | bakwht | txtrst)
		local color_name=$1
		shift
		echo -e "${!color_name}$*$txtrst"
	;;
	*)
		echo "usage: output <success | warn | error | color name> content" && return 1
	;;
	esac
}
app_ctl(){
	opt=$1
    shift
    command=$1
    exe_command=`echo $*`
    case $opt in
        start)
            echo -ne "[ $exe_command ]\nstarting..."
            app_ctl status $exe_command > /dev/null
            if [ $? = 0 ]; then
                printf '%50s' '' && output error 'already running.' && return 0
            fi
            $exe_command
            if [ $? = 0 ]; then
                printf '%50s' '' && output success OK && return 0
            else
                printf '%50s' '' && output error FAILED && return 1
            fi
            ;;
        status)
            echo -ne "[ $exe_command ]\nchecking..."
            ps axu|grep -v grep|grep -q "$command"
            if [ $? = 0 ]; then
                printf '%50s' '' && output success 'running. ' && return 0
            else
                printf '%50s' '' && output error 'stopped. ' && return 1
            fi
            ;;
        stop)
            echo -ne "[ $exe_command ]\nstopping..."
            app_ctl status $exe_command > /dev/null
            if [ $? = 1 ]; then
                printf '%50s' '' && output error 'not running.' && return 0
            fi
            ps axu|grep -v grep|grep "$command"|awk '{print $2}'|xargs -i kill {}
            sleep 0.5
            app_ctl status $exe_command > /dev/null
            if [ $? = 0 ]; then
                printf '%50s' '' && output error 'failed. ' && return 1
            else
                printf '%50s' '' && output success 'stopped. ' && return 0
            fi
            ;;
        restart)
            app_ctl stop $exe_command || return 1
            app_ctl start $exe_command || return 1
            ;;
        *)
            [ -z "$1" ] && echo "usage: app_ctl <start|stop|restart|status> command args" && return 1
            ;;
    esac
}

if [ x"$*" = x"sc" ]; then
	prompt_color_list sc
elif [ x"$*" = x"--help" ]; then
	prompt_color_list
	usage
	env_check
	delimit_line
	check_result
	output
    app_ctl
	echo
else
	prompt_color_list
fi
